import xml.etree.ElementTree as etree

from markdown.treeprocessors import Treeprocessor
from markdown.blockprocessors import BlockProcessor
from markdown.postprocessors import Postprocessor
from markdown.extensions import Extension
import re


# Adds an id attribute to headings ending in the tag "[ID_NAME]"
# Example:
#   ## Anna Olofsson [kar:AnnaOlofsson]

class HeadingReferences(Treeprocessor):
    RE_FENCE = r'[^\[]*\[(.*)\]'

    def run(self, root):
        return self.add_link(root)

    def add_link(self, parent):
        if parent.tag in ['h1', 'h2', 'h3', 'h4', 'h5']:
            res = re.match(self.RE_FENCE, parent.text)
            if res:
                parent.attrib = {"id": res.group(1)}
                parent.text = parent.text.split('[')[0]
        for child in parent:
            self.add_link(child)


# Pulls blocks encapsulated by "!!! TYPE" from the markdown, parse the type
# and handle it in the specified GameSystem object
# Example:
#   !!! Character
#       Stuff
#   !!!
class MarkdownPreprocessor(BlockProcessor):
    RE_CHARACTER = r''
    # Check for three exclamation marks and a block specifier
    RE_FENCE = r'^ *!{3,} (\S*)[\n]((.|\n)*)!{3,}'

    def __init__(self, parser, game_system_class):
        super().__init__(parser)
        self.game_system_class = game_system_class

    def test(self, parent, block):
        res = re.match(self.RE_FENCE, block)
        if res and len(res.groups()) and res.group(1).lower() in self.game_system_class.function_map:
            return res
        return None

    def run(self, parent, blocks):
        block = blocks.pop(0)
        # print(f'Parsing block: "{block}"')
        res = re.match(self.RE_FENCE, block)
        if res and len(res.groups()) > 2:
            type = res.group(1)
            content = res.group(2)
            try:
                parsed_content = self.game_system_class.function_map[type.lower()](content)
            except Exception as e:
                parsed_content = f'<p style="color: red"><b>Unable to parse content: {e}</b></p>'

            child = etree.fromstring(parsed_content)
            parent.append(child)


# Remove br tags that are generated by some reason by markdown
class MarkdownPostprocessor(Postprocessor):

    def __init__(self, game_system_class):
        self.game_system_class = game_system_class

    def run(self, text):
        text = text.replace("<br />\n", "")
        return self.game_system_class.stylize(text)


class CampainGeneratorExtension(Extension):
    def __init__(self, game_system_class):
        self.game_system_class = game_system_class

    def extendMarkdown(self, md):
        md.treeprocessors.register(HeadingReferences(md.parser), 'HeadingReferences', 100)
        md.parser.blockprocessors.register(MarkdownPreprocessor(md.parser, self.game_system_class), 'MarkdownPreprocessor', 101)
        md.postprocessors.register(MarkdownPostprocessor(self.game_system_class), 'MarkdownPostProcessor', float('inf'))
